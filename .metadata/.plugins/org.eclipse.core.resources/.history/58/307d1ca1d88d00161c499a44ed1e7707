package quiz;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Scanner;

import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.event.EventHandler;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;

public class ReviewQuiz extends Quiz {
	protected ArrayList<String> reviewtestwords;
	protected int numrevwords;
	protected boolean needtospellout;


	public ReviewQuiz(File f,TextField _textfield ,Integer level) {
		super(f, _textfield, level);
		// TODO Auto-generated constructor stub
	}


	@Override
	public boolean checkCorrectness(String actual, String expected) throws Exception{
		String text;
		if (!(actual.equals(expected)) && this.currError == 1){
			text = "bash -c echo Try again|festival --tts";
			this.count++;
			Service<Void>speech = new Service<Void>(){

				@Override
				protected Task<Void> createTask() {
					return new Task<Void>(){
						protected Void call() throws Exception {

							ProcessBuilder builder = new ProcessBuilder(text);
							try {
								Process process = builder.start();
							} catch (IOException e) {
								e.getMessage();
							}
							return null;	
						}
					};
				}

			};
			speech.restart();
			return false;
		}else {
			return super.checkCorrectness(actual, expected);
		}	

	}

	public ArrayList<String> getreviewwordsforlevel(int levelnum){
		ArrayList<String> allpossiblerevwords = new ArrayList<String>();

		try {

			Scanner scanner = new Scanner(file);

			int linenumber =0;
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();
				allpossiblerevwords.add(line);
			}

			return allpossiblerevwords;
		} catch(FileNotFoundException e) { 
			return null;
		}
	}


	public void CreateActionListener(){

		_textfield.setOnKeyPressed(new EventHandler<KeyEvent>(){

			private Integer numrevwords;

			@Override
			public void handle(KeyEvent ke){
				if(ke.getCode().equals(KeyCode.ENTER)){

					String input = _textfield.getText();
					if(input.isEmpty()){
						try {
							sayText("Please input a word");
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}else{
						try {
							correctness = checkCorrectness(input,currentWord);		//NEED TO DOUBLE CHECK IF IT GOES TO THE CHECK CORRECTNESS METHOD IN THIS CLASS.
							if(currError == 0){			//Seeing if word is correct in the first try.
								if(correctness){
									System.out.println("Correctonfirstgo");
									f = new File(".reviewlevel"+level+".txt");		
									ReadNWrite rnw = new ReadNWrite(f);
									System.out.println("Need to delete word from reviewlevelX.txt.");
									rnw.removeWordFromFile(currentWord);	
								}else{
									currError = 1;
									System.out.println("Wrong on firstgo");
								}
							}else{			//Seeing if the word is correct in the second try.
								if(correctness){
									currError = 0;	
									System.out.println("Right on second go"); 
									f = new File("Faulted.txt");	
									rnw = new ReadNWrite(f);
									rnw.writeToFile(currentWord);
									f = new File(".reviewlevel"+level+".txt");	
									ReadNWrite rnw = new ReadNWrite(f);			//
									System.out.println("Need to delete word from reviewlevelX.txt.");
									rnw.removeWordFromFile(currentWord);								}else{
										currError = 0;
										System.out.println("Wrong in second go");	//ADD THE FOLLOWING TO THE OTHER FILES		
										try {
											f = new File("Failed.txt");	
											rnw = new ReadNWrite(f);
											rnw.writeToFile(currentWord);		
											spellwordoutloud(currentWord);
											needtospellout = true;
											//		sayText(currentWord);		//NEED TO MAKE FESTIVAL SPELL IT OUT - PERHAPS MAKE THE SPEED SLOWER?

										} catch (IOException e1) {
											// TODO Auto-generated catch block
											e1.printStackTrace();
										}
									}
							}
							if(needtospellout){
								_textfield.clear();
								needtospellout = false;
							}else if(count < reviewtestwords.size()){		//Go to next word.
								_textfield.clear();
								startreviewtest();
							}else{			//If there's no next words return to main menu.
								System.out.println("End of quiz");
								//Create pop up depending on how many are correct or not.
								_textfield.clear();
								int correct = reviewtestwords.size() - errors;
								popupendoflevel(correct);
							}


						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				}
			}



		});
	}


	// Spells word out loud after two failed attempts in the review quiz.
	public  void spellwordoutloud(String word) throws Exception{
		Service<Void> speech = new Service<Void>() {

			@Override
			protected Task<Void> createTask() {
				return new Task<Void>() {
					protected Void call() throws Exception {

						char[] chararray = new char[word.length()];
						chararray = word.toCharArray();
						try {
							for (int a = 0; a < chararray.length; a++) {
								String letter = Character.toString(chararray[a]);
								String command = "echo " + letter + "| festival --tts";
								;
								ProcessBuilder pb = new ProcessBuilder("bash", "-c", command);

								Process process = pb.start();
								Thread.sleep(1500);

							}
						} catch (Exception e) {
							e.printStackTrace();
						}
						return null;
					}

				};
			}

		};
		speech.restart();
	}

	public void startreviewtest() {
		numrevwords = reviewtestwords.size();
		currentWord = reviewtestwords.get(count);
		try {
			if (currentWord.contains("'")){
				System.out.println(currentWord);
				sayText(currentWord + "with an apostrophe");
			}else if (Character.isUpperCase(currentWord.charAt(0))){
				System.out.println(currentWord);
				sayText(currentWord +"," + " Has a capital letter");
				
			}else{
				sayText(currentWord);
				System.out.println(currentWord);

			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


	public void createreviewwordlist(){


		ArrayList<String> revwordsallforlevel = new ArrayList<String>();
		revwordsallforlevel = getreviewwordsforlevel(level);
		if(revwordsallforlevel.get(0).equals("")){
			revwordsallforlevel.remove(0);
		}
		ArrayList<Integer> wordnumbers = new ArrayList<Integer>();
		ReadNWrite rnw = new ReadNWrite(file);
		wordnumbers = rnw.choosewords(revwordsallforlevel);
		ArrayList<String> chosenrevwords = new ArrayList<String>();	
		for (int i = 0; i < wordnumbers.size(); i ++){
			chosenrevwords.add(revwordsallforlevel.get(wordnumbers.get(i)));
		}
		reviewtestwords = new ArrayList<String>();
		reviewtestwords  = chosenrevwords;


	}

}

