package quiz;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

public class ReadNWrite {
	private File f;

	public ReadNWrite(File file) {
		this.f = file;
	}

	public ArrayList<String> chooselevelwordlist(String level) {
		ArrayList<String> wordlist = new ArrayList<String>();
		if (level.equals("%Level 1")) {
			Scanner input = new Scanner(System.in);
			try {
				input = new Scanner(f);
				while (input.hasNextLine()) {
					String line = input.nextLine();
					if (line.equals("%Level 2")) {
						break;
					}
					if (line.equals("%Level 1")) {
						continue;
					}
					wordlist.add(line);
					System.out.println(line);
				}
				input.close();

			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			return wordlist;
		} else {
			String[] splitarray = level.split("\\s+");
			int levelnum = Integer.parseInt(splitarray[1]);
			Scanner input = new Scanner(System.in);
			try {
				input = new Scanner(f);
				while (input.hasNextLine()) {
					String line = input.nextLine();
					if (line.equals(level)) {
						while (input.hasNextLine()) {
							String wordline = input.nextLine();
							int l = levelnum + 1;
							if (wordline.equals("%Level " + l)) {
								break;
							}
							wordlist.add(wordline);
						}
					}
				}
				input.close();

			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			return wordlist;

		}
	}

	public ArrayList<Integer> choosewords(ArrayList<String> wordlist) {
		int COUNTER = 0;
		int INDEX = 0;
		int numberposition;
		int numberofchosenwordssize = 10;
		if (wordlist.size() < 10) {
			numberofchosenwordssize = wordlist.size();
		}
		ArrayList<Integer> linenumbers = new ArrayList<Integer>();
		while (INDEX < numberofchosenwordssize) {
			int randomNum = (int) (Math.random() * ((wordlist.size() - 1) + 1));
			boolean addnumber = true;
			numberposition = randomNum;

			for (int a : linenumbers) {
				if (a == numberposition) {
					addnumber = false;
				}
			}

			if (addnumber == true) {
				linenumbers.add(numberposition);
				INDEX = INDEX + 1;
			}

			COUNTER = COUNTER + 1;
		}
		return linenumbers;
	}

	public void writeToFile(String word) {
		try {
			// writes to appropriate text files for
			FileWriter writetoFile = new FileWriter(f, true);
			BufferedWriter writer = new BufferedWriter(writetoFile);
			PrintWriter out = new PrintWriter(writer);
			out.println(word);
			out.close();
		} catch (IOException e) {
			e.getMessage();
		}
	}

	public ArrayList<String> readStats() {
		ArrayList<String> stats = new ArrayList<String>();
		Scanner scan = null;
		try {
			scan = new Scanner(f);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		while (scan.hasNextLine()) {
			stats.add(scan.nextLine());
		}
		return stats;
	}

	public boolean checkifwordisinfile(String word) {
		try {
			Scanner scanner = new Scanner(f);

			int linenumber = 0;
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();

				if (line.equals(word)) {
					return true;
				}
			}
			return false;
		} catch (FileNotFoundException e) {
			return false;
		}

	}

	public void removeWordFromFile(String currentWord) {
		try {

			File tempfile = new File(f.getAbsolutePath() + ".tmp");

			BufferedReader buffer = new BufferedReader(new FileReader(f));
			PrintWriter print = new PrintWriter(new FileWriter(tempfile));

			String line;

			while ((line = buffer.readLine()) != null) {
				if (!line.trim().equals(currentWord)) {
					print.println(line);
					print.flush();
				}
			}
			print.close();
			buffer.close();

			f.delete();
			tempfile.renameTo(f);
		} catch (FileNotFoundException ex) {
			ex.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public boolean fileisempty() {
		BufferedReader br;
		try {
			String line;
			br = new BufferedReader(new FileReader(f));
			line = br.readLine();
			while ((line = br.readLine()) != null) {
				if (!line.isEmpty()) {
					System.out.println("File is not empty");
					return false;
				}
			}
			return true;
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return false;
	}
}
