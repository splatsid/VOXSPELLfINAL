package quiz;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.event.EventHandler;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.text.Text;
import rewardsNStats.Stats;

public class ReviewQuiz extends Quiz {
	
	/*
	 * This class is a child class of the Quiz class, it is there to facilitate the review mode 
	 */
	protected ArrayList<String> reviewtestwords;
	protected int numrevwords;
	protected boolean needtospellout;


	public ReviewQuiz(File f,TextField _textfield ,Integer level,Label te) {
		super(f, _textfield, level, te);
		// TODO Auto-generated constructor stub
	}


	//Getting all the review words that could be selected for review for a level.
	public ArrayList<String> getreviewwordsforlevel(int levelnum){
		ArrayList<String> allpossiblerevwords = new ArrayList<String>();

		try {

			Scanner scanner = new Scanner(file);

			int linenumber =0;
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();
				allpossiblerevwords.add(line);
			}

			return allpossiblerevwords;
		} catch(FileNotFoundException e) { 
			return null;
		}
	}


	public void CreateActionListener(){

		_textfield.setOnKeyPressed(new EventHandler<KeyEvent>(){

			//Overall review quiz method. Files are written to and tally changed accordingly.
			@Override
			public void handle(KeyEvent ke){
				if(ke.getCode().equals(KeyCode.ENTER)){
					// Checks to see if either there are no review words in the level or complete before it starts the review quiz.
					if(numrevwords == 0){t.setText("No review words for this level");}else {
					String input = _textfield.getText();
					t.setText(input);
					
					if(complete){
						t.setText("Start a new quiz");
					}else if(input.isEmpty()){
						try {
							sayText("Please input a word");
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}else if(needtospellout){
						if(input.equals(currentWord)){
							needtospellout = false;

						}else{
							try {
								spellwordoutloud(currentWord);
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}

					}else{
						try {
							// If the word is correct, remove it from the review list
							correctness = checkCorrectness(input,currentWord);		
							if(currError == 0){			
								if(correctness){
									ReadNWrite rnw = new ReadNWrite(f);
									rnw.removeWordFromFile(currentWord);	
									currentprogresstally = count - errors;
									tally.setText("Current Tally correct on first go: " + currentprogresstally + "/" + count);
								}else{
									currError = 1;
								}
							}else{			
								if(correctness){
									currError = 0;	
									//If the word is faulted, but correct then remove the word from the review list and add it to faulted words.
									Stats.addtoFaulted(currentWord);
									ReadNWrite rnw = new ReadNWrite(f);			
									rnw.removeWordFromFile(currentWord);								
									currentprogresstally = count - errors;
									tally.setText("Current Tally correct on first go: " + currentprogresstally + "/" + count);
								}else{// If the word is incorrect again, then add it to failed statistic and leave it in the current review list.
									tally.setText("Current Tally correct on first go: " + currentprogresstally + "/" + count);
									currError = 0;
									try {
										Stats.addtoFailed(currentWord);
										needtospellout = true;
										// Spells the word out loud via festival.
										spellwordoutloud(currentWord);
									} catch (IOException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									}
								}

							}
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if(needtospellout){
						_textfield.clear();
					}else if(count < reviewtestwords.size()){		//Go to next word.
						_textfield.clear();
						startreviewtest();
					}else{					//If there's no next words go to pop up.
						//Create pop up depending on how many are correct or not.
						_textfield.clear();
						int correct = reviewtestwords.size() - errors;
						complete = true;
						t.setText("Complete, start a new quiz!");
					}
				}
				}
			}
		});
	}


	/*
	 *  Spells word out loud after two failed attempts in the review quiz.
	 *  Depending on what voice is chosen 
	 */
	public  void spellwordoutloud(String word) throws Exception{
		Service<Void> speech = new Service<Void>() {
			
			@Override
			protected Task<Void> createTask() {
				return new Task<Void>() {
					protected Void call() throws Exception {
						if(voice.equals("kal_diphone")){
						char[] chararray = new char[word.length()];
						chararray = word.toCharArray();
						try {
							for (int a = 0; a < chararray.length; a++) {
								String letter = Character.toString(chararray[a]);
								String command = "echo " + letter + "| festival --tts";
								;
								ProcessBuilder pb = new ProcessBuilder("bash", "-c", command);

								Process process = pb.start();
								Thread.sleep(1500);

							}
						} catch (Exception e) {
							e.printStackTrace();
						}
						}else {
							ReadNWrite r = new ReadNWrite(new File("changefestivalvoice.scm"));
							char[] chararray = new char[word.length()];
							chararray = word.toCharArray();
							try {
								for (int a = 0; a < chararray.length; a++) {
									String letter = Character.toString(chararray[a]);
									r.changevoice(voice, letter);
									ProcessBuilder pb = new ProcessBuilder("bash", "-c", "festival", "-b", "changefestivalvoice.scm");

									Process process = pb.start();
									Thread.sleep(1500);
								}
								}catch (IOException e){
									
								}
						}
						return null;
					}

				};
			}

		};
		speech.restart();
	}

	//Starts off the review test for one word.
	public void startreviewtest() {
		numrevwords = reviewtestwords.size();
		currentWord = reviewtestwords.get(count);
		try {
			if (currentWord.contains("'")){
				sayText(currentWord + "with an apostrophe");
			}else if (Character.isUpperCase(currentWord.charAt(0))){
				sayText(currentWord +"," + " Has a capital letter");
			}else{
				sayText(currentWord);
			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


	public void createreviewwordlist(){


		ArrayList<String> revwordsallforlevel = new ArrayList<String>();
		revwordsallforlevel = getreviewwordsforlevel(level);
		if(revwordsallforlevel.get(0).equals("")){
			revwordsallforlevel.remove(0);
		}
		ArrayList<Integer> wordnumbers = new ArrayList<Integer>();
		ReadNWrite rnw = new ReadNWrite(file);
		wordnumbers = rnw.choosewords(revwordsallforlevel);
		ArrayList<String> chosenrevwords = new ArrayList<String>();	
		for (int i = 0; i < wordnumbers.size(); i ++){
			chosenrevwords.add(revwordsallforlevel.get(wordnumbers.get(i)));
		}
		reviewtestwords = new ArrayList<String>();
		reviewtestwords  = chosenrevwords;
	}
	
	public int numreviewwords(){
		return this.numrevwords;
	}

}
