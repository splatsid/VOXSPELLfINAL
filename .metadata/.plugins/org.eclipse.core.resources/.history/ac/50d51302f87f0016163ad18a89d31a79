package quiz;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import spelling.MovieScene;

public abstract class Quiz {	

	protected Integer count;
	protected Integer errors;
	protected Integer currError;
	protected Integer level;
	private ArrayList<String> words;
	private ArrayList<Integer> selectedWords;
	protected File file;
	protected ReadNWrite rnw;
	protected String currentWord;
	protected File f;


	protected TextField _textfield;
	protected boolean correctness;
	protected ArrayList<String> thetestwords;
	public Quiz(File f,TextField tf, Integer level) {
		this.file=f;
		_textfield=tf;
		CreateActionListener();
		correctness = false;
		count=0;
		errors = 0;
		currError = 0;
		this.level = level;
	}


	// Says speech.
	public  void sayText(String text) throws Exception{
		Service<Void>speech = new Service<Void>(){

			@Override
			protected Task<Void> createTask() {
				return new Task<Void>(){
					protected Void call() throws Exception {
						Thread.sleep(800);
						String toText = text + "|festival --tts";
						ProcessBuilder builder = new ProcessBuilder("bash", "-c", "echo " + toText);
						try {
							Process process = builder.start();
						} catch (IOException e) {
							e.getMessage();
						}
						return null;	
					}
				};
			}

		};
		speech.restart();
	}

	//Reads words
	public void loadWords(String level){
		ReadNWrite wordlist = new ReadNWrite(file);
		words = wordlist.chooselevelwordlist("%" + level);
		selectedWords = wordlist.choosewords(words);
	}

	//Returns words to gui manager
	public ArrayList<String> giveWords(){
		ArrayList<String> testwords = new ArrayList<String>();
		for (int i = 0; i < selectedWords.size(); i ++){
			testwords.add(words.get(selectedWords.get(i)));
		}

		return testwords;
	}

	// Returns a boolean that says whether the actual is equal to the expected and festival says whether it is correct or incorrect etc.
	public boolean checkCorrectness(String actual, String expected) throws Exception{
		String[] text = new String[3];
		boolean isRight;
		if (!actual.equals(expected) && currError == 0){
			text[0] = "bash";
			text[1] = "-c";
			text[2] = "echo Incorrect, try again|festival --tts";
			//	currError++;
			//count++;
			errors++;
			isRight = false;
			this.sayText(expected);
		}else if (!(actual.equals(expected)) && currError == 1){
			text = "bash -c echo Incorrect|festival --tts";
			count++;
			isRight = false;
		}else {
			text = "bash -c echo Correct|festival --tts";
			count++;
			//	currError = 0;
			isRight = true;
		}



		Service<Void>speech = new Service<Void>(){

			@Override
			protected Task<Void> createTask() {
				return new Task<Void>(){
					protected Void call() throws Exception {
						ProcessBuilder builder = new ProcessBuilder(text);
						try {
							Process process = builder.start();
						} catch (IOException e) {
							e.getMessage();
						}		

						return null;	
					}
				};
			}

		};
		speech.restart();
		return isRight;
	}

	public Integer getCount(){
		return this.count;
	}

	public Integer getError(){
		return this.errors;
	}
	
	

	public void CreateActionListener(){

		_textfield.setOnKeyPressed(new EventHandler<KeyEvent>(){

			@Override
			public void handle(KeyEvent ke){
				if(ke.getCode().equals(KeyCode.ENTER)){

					String input = _textfield.getText();
					if(input.isEmpty()){
						try {
							sayText("Please input a word");
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}else{
						try {
							correctness = checkCorrectness(input,currentWord);
							if(currError == 0){			//Seeing if word is correct in the first try.
								if(correctness){
									System.out.println("Correctonfirstgo");
									file = new File("correct.txt");		//Adding word to correct file.
									rnw = new ReadNWrite(file);
									rnw.writeToFile(currentWord);
								}else{
									currError = 1;
									System.out.println("Wrong on firstgo");
								}
							}else{			//Seeing if the word is correct in the second try.
								if(correctness){
									currError = 0;	
									System.out.println("Right on second go"); //ADD THE FOLLOWING TO FAULTED FILE.
									file = new File("Faulted.txt");	
									rnw = new ReadNWrite(file);
									rnw.writeToFile(currentWord);
								}else{
									currError = 0;
									System.out.println("Wrong in second go");	//ADD THE FOLLOWING TO THE OTHER FILES		
									file = new File("Failed.txt");	
									rnw = new ReadNWrite(file);
									rnw.writeToFile(currentWord);		
									file = new File("reviewlevel"+ level +".txt");	 		//is it the stats folder?
									rnw=new ReadNWrite(file);
									rnw.writeToFile(currentWord);
								}
							}

							if(getCount() < 10){		//Go to next word.
								_textfield.clear();
								thetestwords=giveWords();
								startspellingtest(thetestwords);
							}else{			//If there's no next words return to main menu.
								System.out.println("End of quiz");
								//Create pop up depending on how many are correct or not.
								_textfield.clear();
								int correct = 10 - errors;
								count = 0;
								popupendoflevel(correct);
								return;
							}


						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				}
			}


		});
	}


	public void startspellingtest(ArrayList<String> thetestwords) {

		currentWord = thetestwords.get(count);
		try {
			if (currentWord.contains("'")){
				System.out.println(currentWord);
				sayText(currentWord + "with an apostrophe");
			}else{
				System.out.println(currentWord);
				sayText(currentWord);
			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


	public void popupendoflevel(int numcorrect){
		Stage  popupstage = new Stage();
		Button gobackmainmenu;
		Button nextlevel;
		Button watchmovie = null;
		Label label;
		Scene scene;
		BorderPane bp = new BorderPane();
		Pane buttons=new FlowPane();
		gobackmainmenu =new Button("Go back to main screen");
		nextlevel =new Button("Proceed to the next level");
		VBox controls = new VBox(10);
		controls.setAlignment(Pos.CENTER);


		if(numcorrect >= 9){		//MOVIE POP UP
			watchmovie = new Button("Watch Reward Video");
			label = new Label("Congratulations you got "+ numcorrect + " correct. \n This means you can watch a video!");
			controls.getChildren().addAll(gobackmainmenu,nextlevel,watchmovie,label);
			bp.setCenter(controls);
			scene = new Scene(bp,600,400);
			watchmovie.setOnAction(new EventHandler<ActionEvent>(){
				@Override
				public void handle(ActionEvent arg0) {
					spelling.MovieScene movie = new MovieScene(popupstage, scene);

				}



			});

		}else{
			label = new Label("Congratulations you got "+ numcorrect + " correct.");
			controls.getChildren().addAll(gobackmainmenu,nextlevel,label);
			bp.setCenter(controls);
			scene = new Scene(bp,600,400);
		}


		gobackmainmenu.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			// When new quiz is pressed the words are loaded in and the first word is said
			public void handle(ActionEvent arg0) {
				popupstage.close();
			}

		});







		popupstage.setScene(scene);
		popupstage.show();
	}
	public String currentWord(){
		return this.currentWord;
	}



}

