package quiz;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.event.EventHandler;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;

public abstract class Quiz {	

	protected Integer count;
	protected Integer errors;
	protected Integer currError;
	private ArrayList<String> words;
	private ArrayList<Integer> selectedWords;
	private File file;
	protected ReadNWrite rnw;
	protected String currentWord;
	protected File f;

	//protected _textfield;

	/*public Quiz(File f){
	this.file = f;
}*/

	protected TextField _textfield;
	protected boolean correctness;
	private ArrayList<String> thetestwords;
	public Quiz(File f,TextField tf) {
		this.file=f;
		_textfield=tf;
		CreateActionListener();
		correctness = false;
		count=0;
		errors = 0;
		currError = 0;
	}


	// Says speech.
	public  void sayText(String text) throws Exception{
		Service<Void>speech = new Service<Void>(){

			@Override
			protected Task<Void> createTask() {
				return new Task<Void>(){
					protected Void call() throws Exception {

						String toText = text + "|festival --tts";
						ProcessBuilder builder = new ProcessBuilder("bash", "-c", "echo " + toText);
						try {
							Process process = builder.start();
						} catch (IOException e) {
							e.getMessage();
						}
						return null;	
					}
				};
			}

		};
		speech.restart();
	}

	//Reads words
	public void loadWords(String level){
		ReadNWrite wordlist = new ReadNWrite(file);
		words = wordlist.chooselevelwordlist("%" + level);
		selectedWords = wordlist.choosewords(words);
	}

	//Returns words to gui manager
	public ArrayList<String> giveWords(){
		ArrayList<String> testwords = new ArrayList<String>();
		for (int i = 0; i < selectedWords.size(); i ++){
			testwords.add(words.get(selectedWords.get(i)));
		}

		return testwords;
	}

	// Returns a boolean that says whether the actual is equal to the expected and festival says whether it is correct or incorrect etc.
	public boolean checkCorrectness(String actual, String expected) throws Exception{
		String text;
		boolean isRight;
		if (!actual.equals(expected) && currError == 0){
			text = "bash -c echo Incorrect, try again|festival --tts"; //AT THIS STAGE ONLY SAYS THE WORD NOT INCORRECT - FIX UP
			//	currError++;
			//count++;
			errors++;
			isRight = false;
			this.sayText(expected);
		}else if (!(actual.equals(expected)) && currError == 1){
			text = "bash -c echo Incorrect|festival --tts";
			count++;
			isRight = false;
		}else {
			text = "bash -c echo Correct|festival --tts";
			count++;
			//	currError = 0;
			isRight = true;
		}



		Service<Void>speech = new Service<Void>(){

			@Override
			protected Task<Void> createTask() {
				return new Task<Void>(){
					protected Void call() throws Exception {
						ProcessBuilder builder = new ProcessBuilder(text);
						try {
							Process process = builder.start();
						} catch (IOException e) {
							e.getMessage();
						}
						ReadNWrite writeToStats;
						if (isRight == true && currError == 0){
							writeToStats = new ReadNWrite(new File("correct.txt"));
							writeToStats.writeToFile(expected);
						}else if (isRight == true && currError == 1){
							writeToStats = new ReadNWrite(new File("Faulted.txt"));
							writeToStats.writeToFile(expected);
						}else {
							writeToStats = new ReadNWrite(new File("Failed.txt"));
							writeToStats.writeToFile(expected);
						}		

						return null;	
					}
				};
			}

		};
		speech.restart();
		return isRight;
	}

	public Integer getCount(){
		return this.count;
	}

	public Integer getError(){
		return this.errors;
	}

	public void CreateActionListener(){

		_textfield.setOnKeyPressed(new EventHandler<KeyEvent>(){

			@Override
			public void handle(KeyEvent ke){
				if(ke.getCode().equals(KeyCode.ENTER)){

					String input = _textfield.getText();
					if(input.isEmpty()){
						sayText("Please input a word");

					}else{
						try {
							correctness = checkCorrectness(input,currentWord);
							if(currError == 0){			//Seeing if word is correct in the first try.
								if(correctness){
									System.out.println("Correctonfirstgo");
									try {
										f = new File("correct.txt");		//Adding word to correct file.
										rnw = new ReadNWrite(f);
										rnw.writeToFile(currentWord);
									} catch (IOException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									}
								}else{
									currError = 1;
									System.out.println("Wrong on firstgo");
								}
							}else{			//Seeing if the word is correct in the second try.
								if(correctness){
									currError = 0;	
									System.out.println("Right on second go"); //ADD THE FOLLOWING TO FAULTED FILE.
									try {
										f = new File("Faulted.txt");	
										rnw = new ReadNWrite(f);
										rnw.writeToFile(currentWord);		
									} catch (IOException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									}
								}else{
									currError = 0;
									System.out.println("Wrong in second go");	//ADD THE FOLLOWING TO THE OTHER FILES		
									try {
										f = new File("Failed.txt");	
										rnw = new ReadNWrite(f);
										rnw.writeToFile(currentWord);		
										f = new File("reviewlevel"+ level +".txt");	 
										rnw=new ReadNWrite(f);
										boolean wordisinfailedwordlist;
										if(!checkifwordinfile(currentWord)){
										rnw.writeToFile(currentWord);
										}
									} catch (IOException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									}
								}
							}

							if(getCount() < 10){		//Go to next word.
								_textfield.clear();
								thetestwords=giveWords();
								startspellingtest(thetestwords);
							}else{			//If there's no next words return to main menu.
								System.out.println("End of quiz");
								//Create pop up depending on how many are correct or not.

								int correct = 10 - errors;
						//	popupendoflevel(correct);
							}


						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				}
			}


		});
	}


	public void startspellingtest(ArrayList<String> thetestwords) {

		currentWord = thetestwords.get(count);
		try {
			if (currentWord.contains("'")){
				sayText(currentWord + "with an apostrophe");
			}else{
				sayText(currentWord);
			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

//THIS IS A POP UP MENU METHOD ONCE A LEVEL IS COMPLETED! IT'S HARD TO DO WITHOUT JAVAFX WILL DO IT AT HOME	
	//WILL PROBABLY NEED TO BE EDITED WITH OPTIONS ETC. 

	//The intention is to have a label in the top part of border pane and then buttons in the center
	//OR have a label in the center part of border pane and then buttons in the bottom segment of it. 
/*
	public void popupendoflevel(int numcorrect){
		Stage  popupstage = new Stage();
		Button gobackmainmenu;
		Button nextlevel;
		Button watchmovie;
		Label label;
		BorderPane bp = new BorderPane(700,600);
	    Pane buttons=new FlowPane();
		
		if(numcorrect >= 9){		//MOVIE POP UP
			gobackmainmenu =new Button("Go back to main screen");
			nextlevel =new Button("Proceed to the next level");
			watchmovie = new Button("Watch Reward Video");
			gobackmainmenu.setOnAction(e-> ButtonClicked(e));
			nextlevel.setOnAction(e-> ButtonClicked(e));
			watchmovie.setOnAction(e-> ButtonClicked(e));
			label = new Label("Congratulations you got "+ numcorrect + "correct. \n This means you can watch a video!");
			title.getChildren().addAll(label);
		     buttons.getChildren().addAll(gobackmainmenu, nextlevel,watchmovie);
		   
		
		}else{
			//NON MOVIE POP UP
		}
*/


	}



