package quiz;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javafx.application.Platform;
import javafx.beans.property.Property;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import rewardsNStats.MovieScene;
import rewardsNStats.Stats;

public abstract class Quiz {
	private Stage movieStage;
	protected int count = 0;
	protected Integer errors;
	protected Integer currError;
	protected Integer level;
	private ArrayList<String> words;
	private ArrayList<Integer> selectedWords;
	protected File file;
	protected ReadNWrite rnw;
	protected String currentWord;
	protected File f;
	protected ComboBox<String> x;
	protected Text t;
	protected Label tally;
	protected TextField _textfield;
	protected boolean correctness;
	protected ArrayList<String> thetestwords;
	protected int currentprogresstally;
	protected String voice;
	protected Button start;
	protected ProgressIndicator p;
	protected boolean complete = false;

	public Quiz(File f, TextField tf, Integer level,Label tallylabel) {
		this.file = f;
		this.f = f;
		_textfield = tf;
		CreateActionListener();
		correctness = false;
		count = 0;
		errors = 0;
		tally = tallylabel;
		currError = 0;
		currentprogresstally = 0;
		this.level = level;
	}

	// Says speech.
	public void sayText(String text) throws Exception {
		ReadNWrite fest = new ReadNWrite(new File("changefestivalvoice.scm"));
		Service<Void> speech = new Service<Void>() {

			@Override
			protected Task<Void> createTask() {
				return new Task<Void>() {
					protected Void call() throws Exception {
						if(voice.equals("kal_diphone")){
						Thread.sleep(1500);
						String toText;
						if(text.contains("'")){
							StringBuilder stringword = new StringBuilder(text);

							int indexofapostrophe = stringword.indexOf("'");
							stringword.insert(indexofapostrophe,"'");
							toText = stringword + "|festival --tts";

						}else{
							toText = text + "|festival --tts";
						}
						ProcessBuilder builder = new ProcessBuilder("bash", "-c", "echo " + toText);
						try {
							Process process = builder.start();
						} catch (IOException e) {
							e.getMessage();
						}
						}else {
							fest.changevoice(voice, text);
							ProcessBuilder b = new ProcessBuilder("bash", "-c", "festival -b changefestivalvoice.scm");
							try {
								Process process = b.start();
							} catch (IOException e){
								e.getMessage();
							}
						}
						return null;
					}
				};
			}

		};
		speech.restart();
		_textfield.disableProperty().bind(speech.runningProperty());
	}

	// Reads words
	public void loadWords(String level) {
		if(file.getName().equals("NZCER-spelling-lists.txt")){
		ReadNWrite wordlist = new ReadNWrite(file);
		words = wordlist.chooselevelwordlist("%" + level);
		selectedWords = wordlist.choosewords(words);
		}else {
			ReadNWrite wordlist = new ReadNWrite(file);
			words = wordlist.readCustomWords();
			selectedWords = wordlist.choosewords(words);
		}
	}

	// Returns words to gui manager
	public ArrayList<String> giveWords() {
		ArrayList<String> testwords = new ArrayList<String>();
		for (int i = 0; i < selectedWords.size(); i++) {
			testwords.add(words.get(selectedWords.get(i)));
		}

		return testwords;
	}

	// Returns a boolean that says whether the actual is equal to the expected
	// and festival says whether it is correct or incorrect etc.
	public boolean checkCorrectness(String actual, String expected) throws Exception {
		String[] text = new String[3];
		boolean isRight;
		if (!actual.equals(expected) && currError == 0) {
			text[0] = "bash";
			text[1] = "-c";
			text[2] = "echo Incorrect, try again|festival --tts";
			errors++;
			isRight = false;
		} else if (!(actual.equals(expected)) && currError == 1) {
			text[0] = "bash";
			text[1] = "-c";
			text[2] = "echo Incorrect|festival --tts";
			count++;
			isRight = false;
		} else {
			text[0] = "bash";
			text[1] = "-c";
			text[2] = "echo Correct|festival --tts";
			count++;
			isRight = true;
		}


		Service<Void> speech = new Service<Void>() {

			@Override
			protected Task<Void> createTask() {
				return new Task<Void>() {
					protected Void call() throws Exception {
						if(voice.equals("kal_diphone")){
						ProcessBuilder builder = new ProcessBuilder(text);
						try {
							Process process = builder.start();
						} catch (IOException e) {
							e.getMessage();
						}
						} else {
							if (!actual.equals(expected) && currError == 0) {
								text[2] = "Incorrect, try again";
							} else if (!(actual.equals(expected)) && currError == 1) {
								text[2] = "Incorrect";
							} else {
								text[2] = "Correct";
							}
							ReadNWrite fest = new ReadNWrite(new File("changefestivalvoice.scm"));
							fest.changevoice(voice, text[2]);
							ProcessBuilder b = new ProcessBuilder("bash", "-c", "festival -b changefestivalvoice.scm");
							try {
								Process process = b.start();
							} catch (IOException e){
								e.getMessage();
							}
						}
						return null;
					}
				};
			}

		};
		speech.restart();
		return isRight;
	}

	public Integer getCount() {
		return this.count;
	}

	public Integer getError() {
		return this.errors;
	}

	//The spelling quiz implementation throughout the course of the quiz.
	public void CreateActionListener() {

		_textfield.setOnKeyPressed(new EventHandler<KeyEvent>() {

			@Override
			public void handle(KeyEvent ke) {
				if (ke.getCode().equals(KeyCode.ENTER)) {
				
					String input = _textfield.getText();
					t.setText(input);
					if (input.isEmpty() && complete) {
						try {
							t.setText("Start new quiz");
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					} else if (input.isEmpty()){
						try {
							sayText("Please input a word");
							t.setText("Please input a word");
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}else  {
						try {
					
							correctness = checkCorrectness(input, currentWord);
							//See if word is correct on first try.
							if (currError == 0) { 
								if (correctness) {
									Stats.addtoCorrect(currentWord);
									currentprogresstally = count - errors;
									tally.setText("Current Tally correct on first go: " + currentprogresstally + "/" + count);
									
								} else {
									currError = 1;
								}

							// Seeing if the word is correct in the second try.
							} else { 
								if (correctness) {
									currError = 0;
									Stats.addtoFaulted(currentWord);
									currentprogresstally = count - errors;
									tally.setText("Current Tally correct on first go: " + currentprogresstally + "/" + count);

								} else {
									currError = 0;
									Stats.addtoFailed(currentWord);
									System.out.println(f);
									if(f.getName().equals("NZCER-spelling-lists.txt")){
									file = new File("reviewfiles/.reviewlevel" + level + ".txt"); // is
									currentprogresstally = count - errors;
									tally.setText("Current Tally correct on first go: " + currentprogresstally + "/" + count);
									rnw = new ReadNWrite(file);
									rnw.writeToFile(currentWord);
									} else {
										file = new File("reviewfiles/.generalreview.txt");
										currentprogresstally = count - errors;
										tally.setText("Current Tally correct on first go: " + currentprogresstally + "/" + count);
										rnw = new ReadNWrite(file);
										rnw.writeToFile(currentWord);
									}
								}
							}

							if (getCount() < 10) { // Go to next word.
								_textfield.clear();
								thetestwords = giveWords();
								startspellingtest(thetestwords);
							} else { // If there's no next words create a pop up depending on how many are correct.											
								_textfield.clear();
								tally.setText("Current Tally correct on first go: ");
								
								int correct = 10 - errors;
								start.setDisable(false);
								count = 0;
								complete = true;
								return;
							}

						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
			}

		});
	}
	
	//This method starts off the spelling test for only one word.
	public void startspellingtest(ArrayList<String> thetestwords) {

		currentWord = thetestwords.get(count);
		try {
			if (currentWord.contains("'")) {
				sayText(currentWord + "with an apostrophe");
				t.setText("Has an apostrophe");
			} else if (Character.isUpperCase(currentWord.charAt(0))) {
				sayText(currentWord) ;
				t.setText("Has a capital letter");
			} else {
				sayText(currentWord);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	
	public String currentWord() {
		return this.currentWord;
	}

	public void giveComboNShow(ComboBox c, Text t) {
		this.x = c;
		this.t = t;
	}

	public String numbercorrect() {
		return String.valueOf(getCount() - errors);
	}
	
	public void setVoice(String voice){
		this.voice = voice;
	}
	
	public void setProg(ProgressIndicator prog){
		this.p = prog;
	}
	
	public boolean isComplete(){
		return complete;
	}
	
	public void setStart(Button start){
		this.start  = start;
	}

}



