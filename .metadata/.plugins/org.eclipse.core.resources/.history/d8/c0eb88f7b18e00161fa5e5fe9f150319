package application;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Control;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;
import quiz.NewQuiz;
import quiz.Quiz;
import quiz.ReadNWrite;
import quiz.ReviewQuiz;

public class GUIManager extends Application {
	private Quiz quiz;
	private ReviewQuiz rq;
	private ArrayList<String> quizwords;
	private String voice = "kal_diphone";

	// The main frame, stores the different tabs
	public void start(Stage primaryStage) {

		TabPane tabs = new TabPane();
		Tab tabNewQuiz = new Tab();
		tabNewQuiz.setText("New Spelling Quiz");
		tabNewQuiz.setContent(newQuiz());

		Tab tabStats = new Tab();
		tabStats.setText("Stats view");
		tabStats.setContent(statsView());

		Tab options = new Tab();
		options.setText("Configurations");
		options.setContent(options());

		tabs.getTabs().addAll(tabNewQuiz, tabStats, options);

		Scene scene = new Scene(tabs, 600, 500); // Manage scene size
		primaryStage.setTitle("VOXSPELL");
		primaryStage.setScene(scene);
		primaryStage.show();

	}

	// The new quiz tab controls the buttons and actions that are related to the
	// new quiz
	private Pane newQuiz() {

		final Text showWord = new Text("New spelling quiz");
		final TextField inputText;

		BorderPane quizBG = new BorderPane();
		quizBG.setPadding(new Insets(5, 10, 5, 5));

		HBox footer = new HBox(10);

		final Text count = new Text("Count");

		inputText = new TextField("");
		inputText.setAlignment(Pos.BOTTOM_LEFT);
		quizBG.setBottom(inputText);

		ObservableList<String> levels = FXCollections.observableArrayList("Level 1", "Level 2", "Level 3", "Level 4",
				"Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10", "Level 11"

				);
		ComboBox<String> combo = new ComboBox(levels);
		combo.setPromptText("Quiz Level");

		Button sbmt = new Button(); // The start quiz button
		sbmt.setText("Start Quiz");

		Button quizrev = new Button();// Review quiz button
		quizrev.setText("Review Quiz");

		HBox buttonz = new HBox(10); // Horizontal box that allows two buttons
		// to be placed on the same row
		buttonz.setAlignment(Pos.TOP_CENTER);
		buttonz.getChildren().addAll(sbmt, combo, quizrev);
		quizBG.setTop(buttonz);

		// The output that is shown in the center of the screen wth the current tally of correct answers.
		showWord.setFont(Font.font("Tahoma", FontWeight.NORMAL, 25));
		showWord.setTextAlignment(TextAlignment.CENTER);
		Label tally = new Label("Current tally correct on first go: ");	
		VBox vertbox = new VBox(10);
		vertbox.setAlignment(Pos.CENTER);
		vertbox.getChildren().addAll(showWord,tally);	
		quizBG.setCenter(vertbox);
		
		//Repeat word button.
		Button repeatword = new Button("Repeat Word");
		buttonz.getChildren().add(repeatword);
		repeatword.setAlignment(Pos.CENTER_RIGHT);
		sbmt.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			// When new quiz is pressed the words are loaded in and the first
			// word is said
			public void handle(ActionEvent arg0) {
				rq = null;
				if (combo.getValue() == null) {
					showWord.setText("Choose a level");
				} else {
					File file = new File("NZCER-spelling-lists.txt");
					quiz = new NewQuiz(file, inputText, getLevel(combo.getValue()),tally);
					quiz.loadWords(combo.getValue());
					quiz.setVoice(voice);
					quizwords = new ArrayList<String>(quiz.giveWords());
					try {
						quiz.startspellingtest(quizwords);
						quiz.giveComboNShow(combo, showWord);
						showWord.setText("Spelling quiz started");
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}

		});

		//When this button is pressed it should say the word currently being spelled in the quiz.
		repeatword.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent arg0) {
				try {
					if (quiz == null && rq == null) {
						showWord.setText("Start a new quiz");
					} else if (quiz != null) {
						quiz.sayText(quiz.currentWord());
					}else if (rq != null){
						rq.sayText(rq.currentWord());
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}

		});

		//This is for when the user selects the option to do a review quiz on a particular level.
		quizrev.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent arg0) {
				quiz = null;
				if(combo.getValue() == null){
					showWord.setText("Select a level to review from");
				}else {
				int letternum = getLevel(combo.getValue());
				System.out.println(letternum);
				File file = new File(".reviewlevel" + letternum + ".txt");

				rq = new ReviewQuiz(file, inputText, letternum,tally);
				rq.giveComboNShow(combo, showWord);
				rq.setVoice(voice);
				if(rq == null ||file.length() == 1){
					showWord.setText("No review words for this level");
				}else {
					ArrayList<String> revwordsallforlevel = new ArrayList<String>();
					revwordsallforlevel = rq.getreviewwordsforlevel(letternum);

					if (revwordsallforlevel.get(0).equals("")){
						revwordsallforlevel.remove(0);
						showWord.setText("Review quiz started");
						
						int numrevwords = revwordsallforlevel.size();
						ArrayList<Integer> wordnumbers = new ArrayList<Integer>();
						ReadNWrite rnq = new ReadNWrite(file);
						wordnumbers = rnq.choosewords(revwordsallforlevel);
						rq.createreviewwordlist();
						rq.startreviewtest();
					}
				}
			}
			}

		});

		return quizBG;

	}

	// splits the level to return just the integers
	private Integer getLevel(String level) {
		if (level.length() == 7) {
			return Integer.parseInt(level.substring(6));
		} else {
			return Integer.parseInt(level.substring(6)) + Integer.parseInt(level.substring(7));
		}
	}

	// Controls the stats view pane
	private Pane statsView() {
		BorderPane pane = new BorderPane();
		pane.setPadding(new Insets(20, 0, 20, 20));

		// List view to show the statistics of each word
		final ListView<String> listofStats = new ListView<>();
		listofStats.setMaxHeight(Control.USE_PREF_SIZE);
		listofStats.setMaxWidth(350);
		pane.setCenter(listofStats);

		// Buttons that calculate and clear stats
		Button calcStats = new Button("Calculate Statistics");
		ObservableList<String> levels = FXCollections.observableArrayList("Level 1", "Level 2", "Level 3", "Level 4",
				"Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10", "Level 11"

				);
		final ComboBox<String> combo = new ComboBox(levels);
		combo.setPromptText("Level");
		Text text = new Text("Click again after a second for stats");

		// Vertical box so that buttons can be stored in the same column.
		VBox verticalBox = new VBox(10);
		verticalBox.setAlignment(Pos.CENTER);
		verticalBox.getChildren().addAll(calcStats, combo, text);
		pane.setLeft(verticalBox);
		calcStats.setOnAction(new EventHandler<ActionEvent>() {
			Process p;

			@Override
			public void handle(ActionEvent arg0) {

				Service<Void> stat = new Service<Void>() {

					@Override
					protected Task<Void> createTask() {
						return new Task<Void>() {
							protected Void call() throws Exception {
								String path = System.getProperty("user.dir") + "/produceStats";
								System.out.println(path);

								try {
									Process p = Runtime.getRuntime().exec(path);
								} catch (IOException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}

								return null;
							}

						};
					}

				};
				stat.restart();
				stat.setOnSucceeded(new EventHandler<WorkerStateEvent>(){

					@Override
					public void handle(WorkerStateEvent arg0) {
						ReadNWrite readStats = new ReadNWrite(new File("." + combo.getValue().replaceAll(" ", "") + "stats"));
						ArrayList<String> stats = new ArrayList<String>();
						stats = readStats.readStats();

						if (stats.isEmpty()) {
							stats.add("Have not attempted the level yet");
						}
						ObservableList<String> viewstats = FXCollections.observableArrayList(stats);
						listofStats.setItems(viewstats);
					}
					
				});
			
			}

		});
		return pane;
	}

	private Pane options() {
		BorderPane pane = new BorderPane();
		VBox configurations = new VBox(20);
		Button changevoice = new Button("Change voice");
		
		ObservableList<String> levels = FXCollections.observableArrayList("Default", "Auckland NZ");
		final ComboBox<String> combo = new ComboBox(levels);
		combo.setPromptText("Festival Voices");

		Button btn = new Button("Clear Statistics");

		configurations.getChildren().addAll(btn, combo, changevoice);
		configurations.setAlignment(Pos.CENTER);
		pane.setCenter(configurations);

		btn.setOnAction(new EventHandler<ActionEvent>() {
			@Override

			public void handle(ActionEvent arg0) {
				String path = System.getProperty("user.dir") + "/clearStats";
				try {
					Process p = Runtime.getRuntime().exec(path);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

				catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		});
		
		
		changevoice.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			public void handle(ActionEvent arg0) {
				if(combo.getValue().equals("Auckland NZ")){
					voice = "akl_nz_jdt_diphone";
				}else {
					voice = "kal_diphone";
				}
			}
		});
		
		
		return pane;

	}
	public static void main(String[] args) {
		Application.launch(args);
	}

}