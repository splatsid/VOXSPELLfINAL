package application;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Control;
import javafx.scene.control.ListView;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;
import quiz.NewQuiz;
import quiz.Quiz;
import quiz.ReadNWrite;

public class GUIManager extends Application {
private Quiz quiz;
private ArrayList<String> quizwords;
	// The main frame, stores the different tabs
	public void start(Stage primaryStage) {

		TabPane tabs = new TabPane();
		Tab tabNewQuiz = new Tab();
		tabNewQuiz.setText("New Spelling Quiz");
		tabNewQuiz.setContent(newQuiz());

		Tab tabStats = new Tab();
		tabStats.setText("Stats view");
		tabStats.setContent(statsView());
		
		Tab options = new Tab();
		options.setText("Configurations");
		options.setContent(options());

		tabs.getTabs().addAll(tabNewQuiz, tabStats, options);

		Scene scene = new Scene(tabs, 600, 400); // Manage scene size
		primaryStage.setTitle("VOXSPELL");
		primaryStage.setScene(scene);
		primaryStage.show();
		
	}
	
	
	
	

	// The new quiz tab controls the buttons and actions that are related to the
	// new quiz
	private Pane newQuiz() {

		final Text showWord = new Text("New spelling quiz");
		final TextField inputText;

		BorderPane quizBG = new BorderPane();
		quizBG.setPadding(new Insets(5, 10, 5, 5));
		
		HBox footer = new HBox(10);
		
		final Text count = new Text("Count");
		
		inputText = new TextField("");
		inputText.setAlignment(Pos.BOTTOM_LEFT);
		quizBG.setBottom(inputText);
		
		ObservableList<String> levels = 
				FXCollections.observableArrayList(
						"Level 1",
						"Level 2",
						"Level 3",
						"Level 4",
						"Level 5",
						"Level 6",
						"Level 7",
						"Level 8",
						"Level 9",
						"Level 10",
						"Level 11"
						
						);
		final ComboBox<String> combo = new ComboBox(levels);
		combo.setPromptText("Quiz Level");
		
		Button sbmt = new Button(); // The start quiz button
		sbmt.setText("Start Quiz");

		Button quizrev = new Button();// Review quiz button
		quizrev.setText("Review Quiz");

		HBox buttonz = new HBox(10); // Horizontal box that allows two buttons
										// to be placed on the same row
		buttonz.setAlignment(Pos.TOP_CENTER);
		buttonz.getChildren().addAll(sbmt, combo, quizrev);
		quizBG.setTop(buttonz);

		// The output that is shown in the center of the screen
		showWord.setFont(Font.font("Tahoma", FontWeight.NORMAL, 25));
		showWord.setTextAlignment(TextAlignment.CENTER);
		quizBG.setCenter(showWord);

		sbmt.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			// When new quiz is pressed the words are loaded in and the first word is said
			public void handle(ActionEvent arg0) {
				File file = new File("NZCER-spelling-lists.txt");
				quiz = new NewQuiz(file);
				quiz.loadWords(combo.getValue());
				quizwords = new ArrayList<String>(quiz.giveWords());
				try {
					quiz.sayText(quizwords.get(1));
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		});

		return quizBG;
	}
	
	
	
	
	

	// Controls the stats view pane
	private Pane statsView() {
		BorderPane pane = new BorderPane();
		pane.setPadding(new Insets(20, 0, 20, 20));

		// List view to show the statistics of each word
		final ListView<String> listofStats = new ListView<>();
		listofStats.setMaxHeight(Control.USE_PREF_SIZE);
		listofStats.setMaxWidth(350);
		pane.setCenter(listofStats);

		// Buttons that calculate and clear stats
		Button calcStats = new Button("Calculate Statistics");
		ObservableList<String> levels = 
				FXCollections.observableArrayList(
						"Level1",
						"Level2",
						"Level3",
						"Level4",
						"Level5",
						"Level6",
						"Level7",
						"Level8",
						"Level9",
						"Level10",
						"Level11"
						
						);
		final ComboBox<String> combo = new ComboBox(levels);
		combo.setPromptText("Level");
		
		// Vertical box so that buttons can be stored in the same column.
		VBox verticalBox = new VBox(10);
		verticalBox.setAlignment(Pos.CENTER);
		verticalBox.getChildren().addAll(calcStats,combo);
		pane.setLeft(verticalBox);
		
		
		
		calcStats.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			public void handle(ActionEvent arg0) {
				
				Service<ArrayList<String>>makeStats = new Service<ArrayList<String>>(){
					
					@Override
					protected Task<ArrayList<String>> createTask() {
						return new Task<ArrayList<String>>(){
							protected ArrayList<String> call() throws Exception {

						ProcessBuilder builder = new ProcessBuilder("bash produceStats");
						try {
							Process process = builder.start();
						} catch (IOException e) {
							e.getMessage();
						}
						
						ReadNWrite readStats = new ReadNWrite(new File("." + combo.getValue() + "stats"));
						ArrayList<String> stats = new ArrayList<String>();
						stats =readStats.readStats();
						return stats;
						}
					};
					return;
					}

			};
			ArrayList<String> stats = new ArrayList<String>();
				makeStats.restart();
				stats = makeStats.getValue();
				ObservableList<String> viewstats = FXCollections.observableArrayList(stats);
				listofStats.setItems(viewstats);				
			} 
			
		});
			return pane;
		}
	
	
	private Pane options(){
		BorderPane pane = new BorderPane();
		VBox configurations = new VBox(20);	
		
		ObservableList<String> levels = 
				FXCollections.observableArrayList(
						"Default",
						"American"
						);
		final ComboBox<String> combo = new ComboBox(levels);
		combo.setPromptText("Festival Voices");
		
		Button btn = new Button("Clear Statistics");
		
		configurations.getChildren().addAll(btn,combo);
		configurations.setAlignment(Pos.CENTER);
		pane.setCenter(configurations);
		
		btn.setOnAction(new EventHandler<ActionEvent>(){

			@Override
			public void handle(ActionEvent arg0) {
				ProcessBuilder builder = new ProcessBuilder("bash clearStats");
				try {
					Process process = builder.start();
				} catch (IOException e) {
					e.getMessage();
				}
			} 
			
		});
	
		return pane;
	}
	
	

	public static void main(String[] args) {
		launch(args);
	}

}